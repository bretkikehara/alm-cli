#!/usr/bin/env node

process.title = 'alm';

var DEFAULT_ARGS = {
      'secret': {
        alias: 's',
        default: '',
        describe: 'User defined secret',
        type: 'string'
      },
      'bucket': {
        alias: 'bu',
        describe: 'The AWS bucket',
        type: 'string'
      },
      'path': {
        alias: 'p',
        default: process.cwd(),
        describe: 'Local directory used to generate the config',
        type: 'string'
      },
    },
    argv = require('yargs')
    .usage('Usage: $0 <command> [options]')
    .demand(1)
    .command('config', 'Generate the config file', {
      'secret': DEFAULT_ARGS.secret,
      'id': {
        alias: 'i',
        default: process.env.AWS_ACCESS_KEY_ID,
        describe: 'The AWS_ACCESS_KEY_ID value',
        type: 'string'
      },
      'key': {
        alias: 'k',
        default: process.env.AWS_SECRET_ACCESS_KEY,
        describe: 'The AWS_SECRET_ACCESS_KEY value',
        type: 'string'
      },
      'region': {
        alias: 'r',
        default: process.env.AWS_REGION,
        describe: 'The localization file\'s AWS bucket region',
        type: 'string'
      },
      'path': DEFAULT_ARGS.path,
      'basePath': {
        alias: 'b',
        default: 'languages',
        describe: 'The folder where the locale bundles are stored',
        type: 'string'
      },
      'ext': {
        alias: 'e',
        default: '.lang.json',
        describe: 'The bundle file extension',
        type: 'string'
      },
      'file': {
        alias: 'f',
        describe: 'Save config to a file',
        type: 'string'
      },
      'bucket': DEFAULT_ARGS.bucket
    })
    .command('upload', 'Upload the config file to AWS', {
      'secret': DEFAULT_ARGS.secret,
      'file': {
        alias: 'f',
        describe: 'The generated ALM config file to upload',
        type: 'string'
      },
      'path': DEFAULT_ARGS.path,
      'bucket': DEFAULT_ARGS.bucket
    })
    .command('version', 'Show the CLI version')
    .argv,
    command = argv._[0],
    lib = require(__dirname + '/../src/lib.js'),
    log = lib.log;

var localizationCfg = {
      basePath: argv.basePath,
      workingPath: argv.path,
      fileExtension: argv.ext,
    },
    tokenCfg = argv.secret && argv.id && argv.key && argv.region ? {
      'secret': argv.secret,
      'aws_access_key_id': argv.id,
      'aws_secret_access_key': argv.key,
      'region_name': argv.region,
    } : undefined;

if (command === 'version') {
  lib.version();
} else if (command === 'config') {
  lib.config(localizationCfg, tokenCfg).then(function (cfg) {
    if (argv.bu) {
      if (tokenCfg) {
        // TODO FIX ME
        log.err('FIX UPLOAD');
      } else {
        log.err('Failed to upload config. Missing token.');
      }
    } else if (argv.f) {
      lib.writeConfig(argv.f, cfg).then(function () {
        log.suc('Saved config to', argv.f);
      }).catch(function (err) {
        log.err('Failed to write config', err);
      });
    } else {
      log.info('\nALM Config\n------------------------------------------------------------');
      console.log(cfg);
    }
  });
} else if (command === 'upload') {
  log.info('Reading file: ', argv.f);
  lib.read(argv.f).then(function (localizationCfg) {
    if (!argv.s) {
      return Promise.reject('Define user secret to decrypt token!');
    }
    if (!localizationCfg.token) {
      return Promise.reject('Token is missing from config file!');
    }
    if (!argv.bu) {
      return Promise.reject("AWS bucket is empty");
    }
    log.info('Uploading config:', argv.f);
    return lib.upload(localizationCfg, argv.s, argv.bu, argv.p).then(function () {
      log.info('Uploaded config:', argv.f);
    }, function (err) {
      log.info('Failed to upload config:', argv.f);
      log.err(err);
    });
  }, function (err) {
    if (err) {
      log.err('Failed to read config');
    } else {
      log.err('Define config file to read!');
    }
  });
}
